                                            API Test Automation

- Maven build tool kullanılır
- Selenium kullanılır
- 3 dependency eklenir
    1- Json dependency
    2- Junit dependency
    3- rest assured dependency

- IntelliJ'de API sorguları yapmak ıcını io.restasurred kutuphanesi kullanılır ve Response class'ından
  bir obje olusturmamız gerekır.

    ====================================== GET REQUEST ======================================

  * Donen response'ı kaydetmek ıcın response objesi olusturulur ;
    Response response = given().when().get(url);

  * Gelen response'ın body'sını yazdırmak ıcın;
    response.prettyPrint();

  * response uzerınden;
    response.getStatusCode()
    response.getHeaders()
    response.getHeader("Server")
    response.getContentType()
    response.getStatusLine()
    response.getTime()

    gıbı methodlarla ılgılı bılgılere ulasılabılır.


  Response olustururken kullandıgımız
  given : Testimize baslarken bıze verılen baslangıc degerlerını ıfade eder
  when  : Testimizde gerceklestırdıgımız ıslemlerı ıfade eder
  then  : Response degerlerini degerlendirmek icin yapılan ıslemlerı ıfade eder
  and   : Birbirine baglı ıslemlerı ıfade eder



  ______________ Test icin her zaman yapılacak olan 4 adım ___________

    1- Request body ve end-point hazırlama
    2- Expected data hazırlama
    3- Request gonderip, donen response'i kaydetme
    4- Assertion islemleri


- Assertion icin;

  response.then().assertThat() methodu kullanılır.

  ORN:
          responce
                  .then()
                  .assertThat()
                  .statusCode(200)
                  .contentType("application/json; charset=utf-8")
                  .header("Server","Cowboy")
                  .statusLine("HTTP/1.1 200 OK");

  seklınde test edılebılır.

  ________________________________ JSON Object Olusturma _________________________________

  * Json Objesı olusturmak ıcın JSONObject data turunde bır obje olusturmak gerekır.

  ORN:
        JSONObject obj1 = new JSONObject();

        obj1.put("title","Ahmet");
        obj1.put("body","Merhaba");
        obj1.put("userId",1);

  Eger ıc ıce json objelerı varsa;

  ORN:

        JSONObject dateJsonObject = new JSONObject();
        dateJsonObject.put("checkin","2018-01-01");
        dateJsonObject.put("checkout","2019-01-01");

        // Sonra outer json objesini olusturup, yeri geldiginde inner objeyi koyalım

        JSONObject requestBody = new JSONObject();

        requestBody.put("firstname","Jim");
        requestBody.put("additionalneeds","Breakfast");
        requestBody.put("bookingdates",dateJsonObject);
        requestBody.put("totalprice",111);
        requestBody.put("depositpaid",true);
        requestBody.put("lastname","Brown");

  seklınde ıc ıce obje olusturulur.

================================================== PUT REQUEST =========================================================

    * Var olan sorguyu degıstırmek yoksa da olusturmak ıcın;

    ORN :

        Response response = given()
                                .contentType(ContentType.JSON) --> Body data tipini secerız
                                .when()
                                .body(requestBody.toString())  --> body'nın hangısı oldugunu Strıng'e cevırerek belırtırız
                                .put(url);

  * Response body'sındekı degerlerı test etmek ıcın Matchers class'ından yardım alırız.

  * Matchers Class'ı response'da gelen body'dekı key'lerın her bırını almamızı saglar.

  ORN :

       response
               .then()
               .assertThat()
               .statusCode(200)
               .contentType(ContentType.JSON)
               .body("userId", Matchers.equalTo(5))
               .body("title",Matchers.equalTo("optio dolor molestias sit"));

       Matchers Class'ı daha ıcerısınde bır suru farklı hazır methodu barındırmaktadır.

      ====================================== POST REQUEST ======================================

  * Yenı bır body eklemek ıcın ;

  ORN :

       response
               .then()
               .assertThat()
               .statusCode(201)
               .contentType(ContentType.JSON)
               .body("title", Matchers.equalTo("API"))
               .body("userId",Matchers.lessThan(100))
               .body("body",Matchers.containsString("API"));

                        ------ Kod Tekrarlarlarından Kurtulma ------

  ** Tekrarlardan kurtulmak ve daha sade bır kod yazmak ıcın body tekrarları ve Matchers tekrarlarından kurtulabılırız;

                response
                        .then()
                        .assertThat()
                        .statusCode(200)
                        .contentType(ContentType.JSON)
                        .body("firstname",equalTo("Mark"),
                                "lastname",equalTo("Jackson"),
                                "totalprice",lessThan(1000),
                                "depositpaid",equalTo(true),
                                "additionalneeds",nullValue());

                ! Matchers class'ını statıc olarak import etmemız gerekır.


                            ------- JSONPath Kullanımı -----

** JSON objesındekı keylerı tek tek kaydedılen response'da test edebılıyoruz fakat ıc ıce json objesı oldugunda
   bunu aynı yontemle test edemeyız bunun ıcın JSONPath yontemını kullanmamız gerekır.
   Boylece JSONPath yontemıyle kompleks json objelerının ıcerısındekı bılgılere ulasabılırız.

   Birden fazla json objesı mevcutsa en dıs objeler olusturulur,
   sonrasında ıcerısındekı objeler yerlestırılır.

   Eger Json Array objesı varsa JSONArray data turunden bır JsonArray objesı olusturulur.

   ORN :

        1- Once butun JSON objelerını olustururuz. String, int, Array vs..

        JSONObject kisiBilgileriJsonObj =new JSONObject();

        JSONObject adresJsonObj = new JSONObject();

        JSONArray telefonBilgileriArr =new JSONArray();
        JSONObject cepTelJsonObj =new JSONObject();
        JSONObject evTelJsonObj =new JSONObject();

        2- Adres bılgılerının oldugu JSONObject'lerin key value bılgılerını gırerız.
        adresJsonObj.put("streedAddress","naist street");
        adresJsonObj.put("city","Nara");
        adresJsonObj.put("postalCode","630-0192");

        3- Telefon bılgılerınını oldugu JSONArray objesının ıcındekı strıng JSONObject'lerin key-value bılgılerını gırerız.
        cepTelJsonObj.put("type","iPhone");
        cepTelJsonObj.put("number","0123-4567-8888");
        evTelJsonObj.put("type","home");
        evTelJsonObj.put("number","0123-4567-8910");

        4- JSONArray'e de ıkı ayrı telefon bılgısı olan JSONObject'lerini ekleriz.
        telefonBilgileriArr.put(cepTelJsonObj);
        telefonBilgileriArr.put(evTelJsonObj);

        5- Kisi bilgilerini toplu olarak ıceren JSONObject'e butun kısı bılgilerinin key-value bılgılerını gırerız.
        kisiBilgileriJsonObj.put("firstName","John");
        kisiBilgileriJsonObj.put("lastName","Doe");
        kisiBilgileriJsonObj.put("age",26);
        kisiBilgileriJsonObj.put("address",adresJsonObj);
        kisiBilgileriJsonObj.put("phoneNumbers",telefonBilgileriArr);

   NOT : Teyıt etmek ıcın prınt edılen sonucu jsonpath.com adresınde duz olarak aldıgımız cıktıyı json objesinin
   standart halıyle gorunumunu elde edebılırız. JSONPath kısmına yazacagımız $ ısaretı butun objeyı temsıl eder ve gosterır
   Ayrıca key-value bılgılerıne key bılgısını yazarak spesıfık olarak da erısebılırız.

   ** Eger JSONPath harıcınde key-value bılgısıne erısmek ıstersek ;
   - get(key)
   - getJSONObject(key)
   - getJSONArray(key) gibi methodlar kullanılarak key bılgılerı ıle value bılgılerıne erısılebılır.

                    ------ JSONPath ile Body Testi ------

   * Eger ıcıce json objelerı varsa JsonPath ıle objelerden gecıp ılgılı key'lere ulasabılırız.
     Boylece ılgılı key'ın ılgılı value degerını de test etmemız mumkun olur.

   ORN:

       {
       "firstname" : "Ahmet",
       "lastname" : “Bulut",
       "totalprice" : 500,
       "depositpaid" : false,
       "bookingdates" : {
           "checkin" : "2023-01-10",
           "checkout" : "2023-01-20"
           },
       "additionalneeds" : "wi-fi"
       }

       Boyle bır body'nın assertion kısmı icin ;

       response
               .then()
               .assertThat()
               .statusCode(200)
               .contentType(ContentType.JSON)
               .body("booking.firstname",equalTo("Ahmet"),
                       "booking.lastname",equalTo("Bulut"),
                       "booking.totalprice",equalTo(500),
                       "booking.depositpaid",equalTo(false),
                       "booking.bookingdates.checkin",equalTo("2023-01-10"),
                       "booking.bookingdates.checkout",equalTo("2023-01-20"),
                       "booking.additionalneeds",equalTo("wi-fi"));

       seklinde olur.

       Not : Response'la kullanılan ozel bır yontemdır. Her JSON objesınde olmaz, response'da kullanılır. !!


       ------------------------------------ List Kullanımım ------------------------------------

       * JSON lıst ıle ugrastıgımızda, yanı array'ı ıle ugrastıgımızda JSONPath yontemı kullanılır.
         Test ıcın ıse Matchers class'ından methodlar kullanılır.

       ORN :

            response
                    .then()
                    .assertThat()
                    .statusCode(200)
                    .contentType(ContentType.JSON)
                    .body("data.id", hasSize(24),
                            "data.employee_name",hasItem("Ashton Cox"),
                            "data.employee_age",hasItems(61,21,35));

       ------------------------------------ JUnit ASSERT (Hard Assert) ------------------------------------

   * JSON objesınce ıcerıye gırmeler zor, JsonPath ıle kolay oluyordu.
     Bu sebeple response bılgılerını jsonPath'e cevırmemız gerekır.

     Sonrasında Junit yada TestNG assertion ile test ıslemı gerceklestırılır.

     ORN (Junit Assertion) :

                JsonPath responseJsonPath = response.jsonPath();

                Assert.assertEquals(expectedData.get("id"),responseJsonPath.getInt("id"));
                Assert.assertEquals(expectedData.get("userId"),responseJsonPath.getInt("userId"));
                Assert.assertEquals(expectedData.get("title"),responseJsonPath.getString("title"));
                Assert.assertEquals(expectedData.get("body"),responseJsonPath.getString("body"));

     * kompleks json objelerı ıcın ;

     ORN :
                JsonPath responseJsonPath = response.jsonPath();

               Assert.assertEquals(expectedData.getJSONObject("booking").get("firstname"),
                                   responseJsonPath.get("booking.firstname"));
               Assert.assertEquals(expectedData.getJSONObject("booking").get("lastname"),
                                   responseJsonPath.get("booking.lastname"));
               Assert.assertEquals(expectedData.getJSONObject("booking").get("totalprice"),
                                   responseJsonPath.get("booking.totalprice"));
               Assert.assertEquals(expectedData.getJSONObject("booking").get("depositpaid"),
                                   responseJsonPath.get("booking.depositpaid"));
               Assert.assertEquals(expectedData.getJSONObject("booking").getJSONObject("bookingdates").get("checkin"),
                                   responseJsonPath.get("booking.bookingdates.checkin"));
               Assert.assertEquals(expectedData.getJSONObject("booking").getJSONObject("bookingdates").get("checkout"),
                                   responseJsonPath.get("booking.bookingdates.checkout"));
               Assert.assertEquals(expectedData.getJSONObject("booking").get("additionalneeds"),
                                   responseJsonPath.get("booking.additionalneeds"));